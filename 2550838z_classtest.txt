{--Question 1--}
1a
It is a good model : it can judge whether there are wings and spikeys by reading the attributes of dinosaurs through constructors, data types, bool values, and use integers to represent the number of legs of dinosaurs, easy to understand, and haskell is a statically typed language, so it is easy to catch errors.

It's not a good model: it's a simple representation of a dinosaur's properties, and it can't be satisfied if you want to know more complex properties or behaviors of dinosaurs, such as vocalizations, running posture, etc.

In summary, this is a simple model, but more complex behaviors cannot be satisfied, so more typeclasses can be defined to implement ad-hoc polymorphism. And this allows us to represent more similar behaviors for the dinosaur model, running posture, vocalizations, food, and so on


1b
{--test using 'map show [ pterodactyl , stegosaurus , diplodocus ]'--}
data Dinosaur = Dinosaur Bool Bool Int deriving Eq
pterodactyl = Dinosaur True True 2
stegosaurus = Dinosaur False True 4
diplodocus = Dinosaur False False 4

formspikey :: Bool -> [[Char]] -> [Char]
formspikey _ [] = []
formspikey bool (x:xs) =
    if bool then x ++ '^' : formspikey bool xs
    else x ++ '-' : formspikey bool xs

instance Show Dinosaur where
    show (Dinosaur iswinged isspikey numlegs) =
        if iswinged
            then ">" ++ representlegs ++ "<"
            else representlegs
        where
            representlegs = init (formspikey isspikey (replicate numlegs "b"))


{--Question 2--}

2a
sumFromOneTo n
    | n < 1  =  0  {-base case-}
    | otherwise = n + sumFromOneTo (n-1) {-recursive case-}

2b
sumWithAccFromOneTo :: Int -> Int -> Int
sumWithAccFromOneTo n accumulate
    | n < 1  =  accumulate  {-base case-}
    | otherwise = sumWithAccFromOneTo (n - 1) (accumulate + n) {-recursive case-}

Because of this code, the second parameter is used to record the current cumulative sum, but the first one is recalculated every time it is called, so it reduces resource waste and reduces the number of recursive calls

2c
sumWithFoldFromOneTo :: Int -> Int
sumWithFoldFromOneTo n = foldr (+) 0 [1..n]

2d
prop_sum n = sumFromOneTo n == sumWithFoldFromOneTo n

{--Question 3--}

3a
superpower :: (Ord t, Floating t) => t -> t -> t
superpower a 2 = a ** 2
superpower a n
    | n < 2 = a {-base case-}
    | otherwise = superpower (a ** n) (n-1) {-recursive base-}

3b
Because ^ operator is used for integer exponents which is integral type and ** is used for floating point exponents

superpower' :: (Floating t2, Integral t1) => t2 -> t1 -> t2
superpower' a 2 = a ^ 2
superpower' a n
    | n < 2 = a {-base case-}
    | otherwise = superpower' (a ^ n) (n-1) {-recursive base-}

3c
Because here need to use recursive call. And fold is left-associative. We need to calculate from inside the parentheses to outside, which means from left to right. However, foldr calculates from right to left, which is not the correct calculation order.
superpower a n = foldl (**) a [1..n]

3d
superpower a n = a ** product [1..n]